@inproceedings{harp:ccs:2021,
  address = {New York, NY, USA},
  author = {Vasilakis, Nikos and Benetopoulos, Achilles and Handa, Shivam and Schoen, Alizee and Shen, Jiasi and Rinard, Martin C.},
  booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and
Communications Security},
  doi = {10.1145/3460120.3484736},
  isbn = {9781450384544},
  location = {Virtual Event, Republic of Korea},
  publisher = {Association for Computing Machinery},
  series = {CCS \textquotesingle 21},
  title = {Supply-Chain Vulnerability Elimination via Active Learning and Regeneration},
  url = {https://doi.org/10.1145/3460120.3484736},
  year = {2021},
}

@misc{rosettacode,
  author       = {{Rosetta Code contributors}},
  title        = {{Rosetta Code: Programming Tasks}},
  year         = {2024},
  url          = {https://rosettacode.org/},
  note         = {Accessed: 2025-05-19}
}

@misc{regbench2025,
  author       = {Evangelos Lamprou and Julian Dai and Grigoris Ntousakis and Nikos Vasilakis},
  title        = {{RegBench: A Benchmark for library Regeneration}},
  year         = {2025},
  publisher    = {GitHub},
  howpublished = {\url{https://github.com/atlas-brown/regbench}},
  note         = {Accessed: 2025-05-22}
}

@inproceedings{ev:eurosec:2022,
  address = {New York, NY, USA},
  author = {Arvanitis, Iosif and Ntousakis, Grigoris and Ioannidis, Sotiris and Vasilakis, Nikos},
  booktitle = {15th European Workshop on Systems Security},
  doi = {10.1145/3517208.3523753},
  isbn = {9781450392550},
  location = {Rennes, France},
  publisher = {Association for Computing Machinery},
  series = {EuroSec \textquotesingle 22},
  title = {A Systematic Analysis of the Event-Stream Incident},
  url = {https://doi.org/10.1145/3517208.3523753},
  year = {2022},
}

@online{es1,
  author = {Sparling, Ayrton and {others}},
  howpublished = {\textbackslash url{https://github.com/dominictarr/event-stream/issues/116}
},
  note = {Accessed: 2018-12-18},
  title = {Event-Stream, GitHub Issue 116: I don\textquotesingle t know what to say.},
  url = {https://github.com/dominictarr/event-stream/issues/116},
  urldate = {2018-12-18},
  year = {2018},
}

@inproceedings{ohm2020backstabber,
  author = {Ohm, Marc and Plate, Henrik and Sykosch, Arnold and Meier, Michael},
  booktitle = {International Conference on Detection of Intrusions and Malware
, and Vulnerability Assessment},
  organization = {Springer},
  title = {Backstabber\textquotesingle s Knife Collection: A Review of Open Source Software Supply Chain Attacks},
  year = {2020},
}

@misc{ioccc,
  author       = {{IOCCC Organizers}},
  title        = {The International Obfuscated C Code Contest},
  year         = {2024},
  howpublished = {\url{https://www.ioccc.org/}},
  note         = {Accessed: 2025-05-19}
}

@misc{fast_inv_sqrt,
  author       = {Greg Walsh and Cleve Moler},
  title        = {Fast Inverse Square Root Algorithm},
  year         = {1999},
  howpublished = {\url{https://en.wikipedia.org/wiki/Fast_inverse_square_root}},
  note         = {Popularized by its use in Quake III Arena; accessed on 2025-05-22}
}

@misc{codewithsadeemusicplayer,
  author       = {codewithsadee},
  title        = {Music Player},
  year         = {2025},
  howpublished = {\url{https://github.com/codewithsadee/music-player}},
  note         = {Accessed: 2025-05-22}
}

@misc{beets,
  author       = {Adrian Sampson and contributors},
  title        = {beets: The music geek's media organizer},
  year         = {2025},
  howpublished = {\url{https://beets.io/}},
  note         = {Accessed: 2025-05-22}
}

@inproceedings{vasilakis2018breakapp,
  author = {Vasilakis, Nikos and Karel, Ben and Roessler, Nick and Dautenhahn, Nathan and DeHon, Andr{\'e} and Smith, Jonathan M},
  booktitle = {NDSS},
  title = {BreakApp: Automated, Flexible Application Compartmentalization.},
  year = {2018},
}

@inproceedings{vasilakis2019ignis,
  address = {New York, NY, USA},
  author = {Vasilakis, Nikos and Karel, Ben and Palkhiwala, Yash and Sonchack, John and DeHon, Andr{\'e} and Smith, Jonathan M.},
  booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on ProgrammingLanguage Design and Implementation},
  doi = {10.1145/3314221.3314586},
  isbn = {9781450367127},
  keywords = {Scalability, Transformations, Parallelism, Decomposition,Profiling, Scale-out, Load detection, Distribution},
  location = {Phoenix, AZ, USA},
  pages = {1010\textendash 1026},
  publisher = {Association for Computing Machinery},
  series = {PLDI 2019},
  title = {Ignis: Scaling Distribution-Oblivious Systems with Light-Touch Distribution},
  url = {https://doi.org/10.1145/3314221.3314586},
  year = {2019},
}

@inproceedings{Towards_Modern_Ghemaw_2023,
  author = {Ghemawat, Sanjay and Grandl, Robert and Petrovic, Srdjan and Whittaker, Michael and Patel, Parveen and Posva, Ivan and Vahdat, Amin},
  booktitle = {HOTOS \textquotesingle 23: 19th Workshop on Hot Topics in Operating Systems},
  doi = {10.1145/3593856.3595909},
  journal = {Proceedings of the 19th Workshop on Hot Topics in Operating Systems},
  month = {6},
  pages = {110--117},
  publisher = {ACM},
  title = {Towards Modern Development of Cloud Applications},
  url = {https://doi.org/10.1145/3593856.3595909},
  venue = {Providence RI USA},
  year = {2023},
}

@article{kohli1994minimum,
  title={The minimum satisfiability problem},
  author={Kohli, Rajeev and Krishnamurti, Ramesh and Mirchandani, Prakash},
  journal={SIAM Journal on Discrete Mathematics},
  volume={7},
  number={2},
  pages={275--283},
  year={1994},
  publisher={SIAM}
}

@book{Fowler99,
  author    = {Martin Fowler},
  title     = {Refactoring: Improving the Design of Existing Code},
  year      = {1999},
  publisher = {Addison-Wesley}
}

@article{Mens04,
  author  = {Tom Mens and Tom Tourwé},
  title   = {A Survey of Software Refactoring},
  journal = {IEEE Transactions on Software Engineering},
  year    = {2004},
  volume  = {30},
  number  = {2},
  pages   = {126--139}
}

@article{Myers16,
author = {Myers, Brad A. and Stylos, Jeffrey},
title = {Improving API usability},
year = {2016},
issue_date = {June 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {59},
number = {6},
issn = {0001-0782},
url = {https://doi.org/10.1145/2896587},
doi = {10.1145/2896587},
abstract = {Human-centered design can make application programming interfaces easier for developers to use.},
journal = {Commun. ACM},
month = may,
pages = {62–69},
numpages = {8}
}

@inproceedings{chen2021evaluating,
  author    = {Mark Chen et al.},
  title     = {Evaluating Large Language Models Trained on Code},
  booktitle = {arXiv preprint arXiv:2107.03374},
  year      = {2021}
}

@misc{jiang2024llmsdreamelephantswhen,
      title={Do LLMs dream of elephants (when told not to)? Latent concept association and associative memory in transformers}, 
      author={Yibo Jiang and Goutham Rajendran and Pradeep Ravikumar and Bryon Aragam},
      year={2024},
      eprint={2406.18400},
      archivePrefix={arXiv},
      primaryClass={cs.CL},
      url={https://arxiv.org/abs/2406.18400}, 
}

@misc{hwang2024thinkpinkelephant,
      title={Do not think about pink elephant!}, 
      author={Kyomin Hwang and Suyoung Kim and JunHoo Lee and Nojun Kwak},
      year={2024},
      eprint={2404.15154},
      archivePrefix={arXiv},
      primaryClass={cs.CL},
      url={https://arxiv.org/abs/2404.15154}, 
}

@misc{wu2023deceptpromptexploitingllmdrivencode,
      title={DeceptPrompt: Exploiting LLM-driven Code Generation via Adversarial Natural Language Instructions}, 
      author={Fangzhou Wu and Xiaogeng Liu and Chaowei Xiao},
      year={2023},
      eprint={2312.04730},
      archivePrefix={arXiv},
      primaryClass={cs.CR},
      url={https://arxiv.org/abs/2312.04730}, 
}

@misc{xu2023llmfoolitselfpromptbased,
      title={An LLM can Fool Itself: A Prompt-Based Adversarial Attack}, 
      author={Xilie Xu and Keyi Kong and Ning Liu and Lizhen Cui and Di Wang and Jingfeng Zhang and Mohan Kankanhalli},
      year={2023},
      eprint={2310.13345},
      archivePrefix={arXiv},
      primaryClass={cs.CR},
      url={https://arxiv.org/abs/2310.13345}, 
}

@inproceedings{bastan2023neurostructural,
  title={NEUROSTRUCTURAL DECODING: Neural text generation with structural constraints},
  author={Bastan, Mohaddeseh and Surdeanu, Mihai and Balasubramanian, Niranjan},
  booktitle={Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)},
  pages={9496--9510},
  year={2023}
}

@inproceedings{Clarke04,
  author    = {Edmund Clarke and Daniel Kroening and Flavio Lerda},
  title     = {A Tool for Checking ANSI-C Programs},
  booktitle = {TACAS},
  year      = {2004}
}

@book{alur2013syntax,
  title={Syntax-guided synthesis},
  author={Alur, Rajeev and Bodik, Rastislav and Juniwal, Garvit and Martin, Milo MK and Raghothaman, Mukund and Seshia, Sanjit A and Singh, Rishabh and Solar-Lezama, Armando and Torlak, Emina and Udupa, Abhishek},
  year={2013},
  publisher={IEEE}
}

@article{feser2015synthesizing,
  title={Synthesizing data structure transformations from input-output examples},
  author={Feser, John K and Chaudhuri, Swarat and Dillig, Isil},
  journal={ACM SIGPLAN Notices},
  volume={50},
  number={6},
  pages={229--239},
  year={2015},
  publisher={ACM New York, NY, USA}
}

@article{gulwani2011automating,
  title={Automating string processing in spreadsheets using input-output examples},
  author={Gulwani, Sumit},
  journal={ACM Sigplan Notices},
  volume={46},
  number={1},
  pages={317--330},
  year={2011},
  publisher={ACM New York, NY, USA}
}

@article{polikarpova2016program,
  title={Program synthesis from polymorphic refinement types},
  author={Polikarpova, Nadia and Kuraj, Ivan and Solar-Lezama, Armando},
  journal={ACM SIGPLAN Notices},
  volume={51},
  number={6},
  pages={522--538},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@article{gulwani2017program,
  title={Program synthesis},
  author={Gulwani, Sumit and Polozov, Oleksandr and Singh, Rishabh and others},
  journal={Foundations and Trends{\textregistered} in Programming Languages},
  volume={4},
  number={1-2},
  pages={1--119},
  year={2017},
  publisher={Now Publishers, Inc.}
}

@article{austin2021program,
  title={Program synthesis with large language models},
  author={Austin, Jacob and Odena, Augustus and Nye, Maxwell and Bosma, Maarten and Michalewski, Henryk and Dohan, David and Jiang, Ellen and Cai, Carrie and Terry, Michael and Le, Quoc and others},
  journal={arXiv preprint arXiv:2108.07732},
  year={2021}
}

@inproceedings{raza2018disjunctive,
  title={Disjunctive program synthesis: A robust approach to programming by example},
  author={Raza, Mohammad and Gulwani, Sumit},
  booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},
  volume={32},
  number={1},
  year={2018}
}

@article{singh2016blinkfill,
  title={Blinkfill: Semi-supervised programming by example for syntactic string transformations},
  author={Singh, Rishabh},
  journal={Proceedings of the VLDB Endowment},
  volume={9},
  number={10},
  pages={816--827},
  year={2016},
  publisher={VLDB Endowment}
}

@article{yaghmazadeh2018automated,
  title={Automated migration of hierarchical data to relational tables using programming-by-example},
  author={Yaghmazadeh, Navid and Wang, Xinyu and Dillig, Isil},
  journal={Proceedings of the VLDB Endowment},
  volume={11},
  number={5},
  pages={580--593},
  year={2018},
  publisher={VLDB Endowment}
}

@inproceedings{jha2010oracle,
  title={Oracle-guided component-based program synthesis},
  author={Jha, Susmit and Gulwani, Sumit and Seshia, Sanjit A and Tiwari, Ashish},
  booktitle={Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1},
  pages={215--224},
  year={2010}
}

@article{le2017interactive,
  title={Interactive program synthesis},
  author={Le, Vu and Perelman, Daniel and Polozov, Oleksandr and Raza, Mohammad and Udupa, Abhishek and Gulwani, Sumit},
  journal={arXiv preprint arXiv:1703.03539},
  year={2017}
}

@incollection{Eiter_2009,
	doi = {10.1007/978-3-642-03754-2_2},
	url = {https://doi.org/10.1007\%2F978-3-642-03754-2_2},
	year = 2009,
	publisher = {Springer Berlin Heidelberg},
	pages = {40--110},
	author = {Thomas Eiter and Giovambattista Ianni and Thomas Krennwallner},
	title={{{Answer Set Programming: A Primer}}},
	booktitle = {Lecture Notes in Computer Science}
}

@article{Gelfond_2000,
author = {Gelfond, Michael and Lifschitz, Vladimir},
year = {2000},
month = {12},
pages = {},
title={{{The Stable Model Semantics For Logic Programming}}},
volume = {2},
journal = {Logic Programming}
}

@incollection{Gelfond_2002,
	doi = {10.1007/3-540-45632-5_16},
	url = {https://doi.org/10.1007\%2F3-540-45632-5_16},
	year = 2002,
	publisher = {Springer Berlin Heidelberg},
	pages = {413--451},
	author = {Michael Gelfond},
	title={{{Representing Knowledge in A-Prolog}}},
	booktitle = {Computational Logic: Logic Programming and Beyond}
}

@inproceedings{benton2007interactive,
author = {Benton, William C. and Fischer, Charles N.},
title = {Interactive, scalable, declarative program analysis: from prototype to implementation},
year = {2007},
isbn = {9781595937698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1273920.1273923},
doi = {10.1145/1273920.1273923},
abstract = {Static analyses provide the semantic foundation for tools ranging from optimizing compilers to refactoring browsers and advanced debuggers. Unfortunately, developing new analysis specifications and implementations is often difficult and error prone. Since analysis specifications are generally written in a declarative style, logic programming presents an attractive model for producing executable specifications of analyses. However, prior work on using logic programming for program analysis has focused exclusively on solving constraints derived from program texts by an external preprocessor. In this paper, we present DIMPLE, an analysis framework for Java bytecodes implemented in the Yap Prolog system [8]. DIMPLE provides both a representation of Java bytecodes in a database of relations and a declarative domain-specific language for specifying new analyses as queries over this database. DIMPLE thus enables researchers to use logic programming for every step of the analysis development process, from specification to prototype to implementation. We demonstrate that our approach facilitates rapid prototyping of new program analyses and produces executable analysis implementations that are speed-competitive with specialized analysis toolkits.},
booktitle = {Proceedings of the 9th ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming},
pages = {13–24},
numpages = {12},
keywords = {bytecodes, java, logic programming, program analysis, prototyping, tabled prolog},
location = {Wroclaw, Poland},
series = {PPDP '07}
}

@misc{son2022answersetplanningsurvey,
      title={Answer Set Planning: A Survey}, 
      author={Tran Cao Son and Enrico Pontelli and Marcello Balduccini and Torsten Schaub},
      year={2022},
      eprint={2202.05793},
      archivePrefix={arXiv},
      primaryClass={cs.AI},
      url={https://arxiv.org/abs/2202.05793}, 
}

@inproceedings{nguyen2020explainable,
  title={Explainable planning using answer set programming},
  author={Nguyen, Van and Vasileiou, Stylianos L and Son, Tran C and Yeoh, William},
  booktitle={International Conference on Principles of Knowledge Representation and Reasoning (},
  volume={17},
  number={1},
  year={2020}
}

@inproceedings{dig2005role,
author = { Dig, Danny and Johnson, Ralph },
booktitle = { Proceedings of the 21st IEEE International Conference on Software Maintenance },
title = {{ The Role of Refactorings in API Evolution }},
year = {2005},
volume = {},
ISSN = {1063-6773},
pages = {389-398},
abstract = { Frameworks and libraries change their APIs. Migrating an application to the new API is tedious and disrupts the development process. Although some tools and ideas have been proposed to solve the evolution of APIs, most updates are done manually. To better understand the requirements for migration tools we studied the API changes of three frameworks and one library. We discovered that the changes that break existing applications are not random, but they tend to fall into particular categories. Over 80% of these changes are refactorings. This suggests that refactoring-based migration tools should be used to update applications. },
keywords = {null},
doi = {10.1109/ICSM.2005.90},
url = {https://doi.ieeecomputersociety.org/10.1109/ICSM.2005.90},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month =sep}

@misc{kula2017empiricalstudyimpactrefactoring,
      title={An Empirical Study on the Impact of Refactoring Activities on Evolving Client-Used APIs}, 
      author={Raula Gaikovina Kula and Ali Ouni and Daniel M. German and Katsuro Inoue},
      year={2017},
      eprint={1709.09474},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/1709.09474}, 
}


@misc{ikegami2022userefactoringsecurityvulnerability,
      title={On the Use of Refactoring in Security Vulnerability Fixes: An Exploratory Study on Maven Libraries}, 
      author={Ayano Ikegami and Raula Gaikovina Kula and Bodin Chinthanet and Vittunyuta Maeprasart and Ali Ouni and Takashi Ishio and Kenichi Matsumoto},
      year={2022},
      eprint={2205.08116},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2205.08116}, 
}

@article{facebook2010redesigns,
  title        = {Facebook Redesigns Privacy},
  author       = {{Facebook}},
  year         = {2010},
  month        = may,
  day          = {26},
  journal      = {Facebook Newsroom},
  url          = {https://about.fb.com/news/2010/05/facebook-redesigns-privacy},
  note         = {Accessed June 2025}
}

@article{dropbox2014syncengine,
  title        = {Rewriting the Heart of Our Sync Engine},
  author       = {{Dropbox Engineering}},
  year         = {2014},
  journal      = {Dropbox Tech Blog},
  url          = {https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine},
  note         = {Accessed June 2025}
}

@article{gaultier_rewrite_cpp,
  title        = {How to rewrite a C++ codebase successfully},
  author       = {Gaultier},
  year         = {2023},
  month        = jan,
  day          = {1},
  journal      = {Personal Blog},
  url          = {https://gaultier.github.io/blog/how_to_rewrite_a_cpp_codebase_successfully.html},
  note         = {Accessed June 2025}
}

@article{manzoor_cli_python,
  title        = {I Rewrote My CLI Tools in Python — Now I Actually Use Them},
  author       = {Umar Manzoor},
  year         = {2025},
  month        = jun,
  day          = {3},
  journal      = {Python in Plain English},
  url          = {https://python.plainenglish.io/i-rewrote-my-cli-tools-in-python-now-i-actually-use-them-00d8145d12dc},
  note         = {Accessed June 2025}
}

@article{schneier2013security_vulnerabilities,
  title        = {Security Vulnerabilities of Legacy Code},
  author       = {Schneier, Bruce},
  year         = {2013},
  month        = dec,
  day          = {3},
  journal      = {Schneier on Security (blog)},
  url          = {https://www.schneier.com/blog/archives/2013/12/security_vulner_3.html},
  note         = {Accessed June 2025}
}

@misc{ou2025enhancingllmbasedcodetranslation,
      title={Enhancing LLM-based Code Translation in Repository Context via Triple Knowledge-Augmented}, 
      author={Guangsheng Ou and Mingwei Liu and Yuxuan Chen and Xueying Du and Shengbo Wang and Zekai Zhang and Xin Peng and Zibin Zheng},
      year={2025},
      eprint={2503.18305},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2503.18305}, 
}

@article{ziftci2025migrating,
  title={Migrating code at scale with llms at google},
  author={Ziftci, Celal and Nikolov, Stoyan and Sj{\"o}vall, Anna and Kim, Bo and Codecasa, Daniele and Kim, Max},
  journal={arXiv preprint arXiv:2504.09691},
  year={2025}
}

@misc{huynh2025largelanguagemodelscode,
      title={Large Language Models for Code Generation: A Comprehensive Survey of Challenges, Techniques, Evaluation, and Applications}, 
      author={Nam Huynh and Beiyu Lin},
      year={2025},
      eprint={2503.01245},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2503.01245}, 
}

@misc{roh2025breakthechainreasoningfailuresllms,
      title={Break-The-Chain: Reasoning Failures in LLMs via Adversarial Prompting in Code Generation}, 
      author={Jaechul Roh and Varun Gandhi and Shivani Anilkumar and Arin Garg},
      year={2025},
      eprint={2506.06971},
      archivePrefix={arXiv},
      primaryClass={cs.CL},
      url={https://arxiv.org/abs/2506.06971}, 
}

@misc{yang2025evaluatinggeneralizationcapabilitieslarge,
      title={Evaluating the Generalization Capabilities of Large Language Models on Code Reasoning}, 
      author={Rem Yang and Julian Dai and Nikos Vasilakis and Martin Rinard},
      year={2025},
      eprint={2504.05518},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2504.05518}, 
}

@article{sung2006maximum,
  title={Maximum satisfiability},
  author={Sung, Phil},
  journal={Maximum Satisfiability},
  pages={1--2},
  year={2006}
}

@article{Cabalar_2020,
   title={A System for Explainable Answer Set Programming},
   volume={325},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.325.19},
   DOI={10.4204/eptcs.325.19},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Cabalar, Pedro and Fandinno, Jorge and Muñiz, Brais},
   year={2020},
   month=sep, pages={124–136} }


@article{koppel2018onetool,
author = {Koppel, James and Premtoon, Varot and Solar-Lezama, Armando},
title = {One tool, many languages: language-parametric transformation with incremental parametric syntax},
year = {2018},
issue_date = {November 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {OOPSLA},
url = {https://doi.org/10.1145/3276492},
doi = {10.1145/3276492},
abstract = {We present a new approach for building source-to-source transformations that can run on multiple programming languages, based on a new way of representing programs called incremental parametric syntax. We implement this approach in Haskell in our Cubix system, and construct incremental parametric syntaxes for C, Java, JavaScript, Lua, and Python. We demonstrate a whole-program refactoring tool that runs on all of them, along with three smaller transformations that each run on several. Our evaluation shows that (1) once a transformation is written, little work is required to configure it for a new language (2) transformations built this way output readable code which preserve the structure of the original, according to participants in our human study, and (3) our transformations can still handle language corner-cases, as validated on compiler test suites.},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {122},
numpages = {28},
keywords = {refactoring, program transformation, expression problem}
}

@article{dillig2009sail,
  title={SAIL: Static analysis intermediate language with a two-level representation},
  author={Dillig, Isil and Dillig, Thomas and Aiken, Alex},
  journal={Technical Report, Tech. Rep.},
  year={2009}
}


@InProceedings{bap2011,
author="Brumley, David
and Jager, Ivan
and Avgerinos, Thanassis
and Schwartz, Edward J.",
editor="Gopalakrishnan, Ganesh
and Qadeer, Shaz",
title="BAP: A Binary Analysis Platform",
booktitle="Computer Aided Verification",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="463--469",
abstract="BAP is a publicly available infrastructure for performing program verification and analysis tasks on binary (i.e., executable) code. In this paper, we describe BAP as well as lessons learned from previous incarnations of binary analysis platforms. BAP explicitly represents all side effects of instructions in an intermediate language (IL), making syntaxdirected analysis possible. We have used BAP to routinely generate and solve verification conditions that are hundreds of megabytes in size and encompass 100,000's of assembly instructions.",
isbn="978-3-642-22110-1"
}

@misc{compound-ai-blog,
  title={The Shift from Models to Compound AI Systems},
  author={Matei Zaharia and Omar Khattab and Lingjiao Chen and Jared Quincy Davis
          and Heather Miller and Chris Potts and James Zou and Michael Carbin
          and Jonathan Frankle and Naveen Rao and Ali Ghodsi},
  howpublished={\url{https://bair.berkeley.edu/blog/2024/02/18/compound-ai-systems/}},
  year={2024}
}

@misc{copeland2019frightening,
  author       = {Copeland, David Bryant},
  title        = {The Frightening State of Security Around {NPM} Package Management},
  howpublished = {Blog post},
  year         = {2019},
  month        = jul,
  day          = {10},
  url          = {https://naildrivin5.com/blog/2019/07/10/the-frightening-state-security-around-npm-package-management.html},
  note         = {Accessed: 2025-06-17}
}

@misc{handa2021orderawaredataflowmodelparallel,
      title={An Order-Aware Dataflow Model for Parallel Unix Pipelines}, 
      author={Shivam Handa and Konstantinos Kallas and Nikos Vasilakis and Martin Rinard},
      year={2021},
      eprint={2012.15422},
      archivePrefix={arXiv},
      primaryClass={cs.PL},
      url={https://arxiv.org/abs/2012.15422}, 
}

@article{azzopardi2023ltl,
  title={LTL Synthesis on Infinite-State Arenas defined by Programs},
  author={Azzopardi, Shaun and Piterman, Nir and Schneider, Gerardo and Di Stefano, Luca},
  journal={arXiv preprint arXiv:2307.09776},
  year={2023}
}

@inproceedings{solar2008sketch,
  title = {Sketching Your Way to Correctness},
  author = {Solar-Lezama, Armando},
  booktitle = {Proceedings of the International Conference on Programming Language Design and Implementation (PLDI)},
  year = {2008},
  pages = {362--372}
}

@inproceedings{torlak2013rosette,
  title = {Growing Solver-Aided Languages with Rosette},
  author = {Torlak, Emina and Bod{\'{\i}}k, Rastislav},
  booktitle = {Proceedings of Onward! 2013},
  year = {2013},
  pages = {135--152},
  doi = {10.1145/2509578.2509586}
}

@article{alur2013sygus,
  title = {Syntax-Guided Synthesis},
  author = {Alur, Rajeev and Bod{\'{\i}}k, Rastislav and Juniwal, Vipul and McMillan, Kenneth L. and Raghothaman, Mukund and Udupa, Abhishek and others},
  journal = {Proceedings of the IEEE},
  volume = {10},
  number = {1},
  year = {2013}
}

@inproceedings{reynolds2019syguscomp,
  title = {SyGuS-Comp 2018: Results and Analysis},
  author = {Alur, Rajeev and Fisman, Dana and Padhi, Saswat and Singh, Rishabh and Udupa, Abhishek},
  booktitle = {arXiv preprint arXiv:1904.07146},
  year = {2019}
}

@inproceedings{leino2016dafny,
  title = {Dafny: An Automated Program Verifier for Functional Correctness},
  author = {Leino, K. Rustan M.},
  booktitle = {Proceedings of LPAR},
  year = {2016}
}

@article{wu2023programming,
  title={Programming by example made easy},
  author={Wu, Jiarong and Wei, Lili and Jiang, Yanyan and Cheung, Shing-Chi and Ren, Luyao and Xu, Chang},
  journal={ACM Transactions on Software Engineering and Methodology},
  volume={33},
  number={1},
  pages={1--36},
  year={2023},
  publisher={ACM New York, NY, USA}
}

@inproceedings{dynamoth2016,
author = {Durieux, Thomas and Monperrus, Martin},
title = {DynaMoth: dynamic code synthesis for automatic program repair},
year = {2016},
isbn = {9781450341516},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2896921.2896931},
doi = {10.1145/2896921.2896931},
abstract = {Automatic software repair is the process of automatically fixing bugs. The Nopol repair system [4] repairs Java code using code synthesis. We have designed a new code synthesis engine for Nopol based on dynamic exploration, it is called DynaMoth. The main design goal is to be able to generate patches with method calls. We evaluate DynaMoth over 224 of the Defects4J dataset. The evaluation shows that Nopol with DynaMoth is capable of synthesizing patches and enables Nopol to repair new bugs of the dataset.},
booktitle = {Proceedings of the 11th International Workshop on Automation of Software Test},
pages = {85–91},
numpages = {7},
location = {Austin, Texas},
series = {AST '16}
}

@inproceedings{cambronero2019active,
  title={Active learning for software engineering},
  author={Cambronero, Jos{\'e} P and Dang, Thurston HY and Vasilakis, Nikos and Shen, Jiasi and Wu, Jerry and Rinard, Martin C},
  booktitle={Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  pages={62--78},
  year={2019}
}

Program analysis using declarative languages:

@inproceedings{scholz2016datalogfastpa,
author = {Scholz, Bernhard and Jordan, Herbert and Suboti\'{c}, Pavle and Westmann, Till},
title = {On fast large-scale program analysis in Datalog},
year = {2016},
isbn = {9781450342414},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2892208.2892226},
doi = {10.1145/2892208.2892226},
abstract = {Designing and crafting a static program analysis is challenging due to the complexity of the task at hand. Among the challenges are modelling the semantics of the input language, finding suitable abstractions for the analysis, and handwriting efficient code for the analysis in a traditional imperative language such as C++. Hence, the development of static program analysis tools is costly in terms of development time and resources for real world languages. To overcome, or at least alleviate the costs of developing a static program analysis, Datalog has been proposed as a domain specific language (DSL). With Datalog, a designer expresses a static program analysis in the form of a logical specification. While a domain specific language approach aids in the ease of development of program analyses, it is commonly accepted that such an approach has worse runtime performance than handcrafted static analysis tools. In this work, we introduce a new program synthesis methodology for Datalog specifications to produce highly efficient monolithic C++ analyzers. The synthesis technique requires the re-interpretation of the semi-naive evaluation as a scaffolding for translation using partial evaluation. To achieve high-performance, we employ staged-compilation techniques and specialize the underlying relational data structures for a given Datalog specification. Experimentation on benchmarks for large-scale program analysis validates the superior performance of our approach over available Datalog tools and demonstrates our competitiveness with state-of-the-art handcrafted tools.},
booktitle = {Proceedings of the 25th International Conference on Compiler Construction},
pages = {196–206},
numpages = {11},
keywords = {Compiler, Datalog, Program Synthesis, Static Program Analysis},
location = {Barcelona, Spain},
series = {CC '16}
}

@inproceedings{liu2023program,
  title={Program repair guided by datalog-defined static analysis},
  author={Liu, Yu and Mechtaev, Sergey and Suboti{\'c}, Pavle and Roychoudhury, Abhik},
  booktitle={Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  pages={1216--1228},
  year={2023}
}

@inproceedings{scholz2015datalog,
  title={A datalog source-to-source translator for static program analysis: An experience report},
  author={Scholz, Bernhard and Vorobyov, Kostyantyn and Krishnan, Padmanabhan and Westmann, Till},
  booktitle={2015 24th Australasian Software Engineering Conference},
  pages={28--37},
  year={2015},
  organization={IEEE}
}

@article{abeysinghe2024flan,
  title={Flan: an expressive and efficient datalog compiler for program analysis},
  author={Abeysinghe, Supun and Xhebraj, Anxhelo and Rompf, Tiark},
  journal={Proceedings of the ACM on Programming Languages},
  volume={8},
  number={POPL},
  pages={2577--2609},
  year={2024},
  publisher={ACM New York, NY, USA}
}

@inproceedings{gebser2007clasp,
  title={clasp: A conflict-driven answer set solver},
  author={Gebser, Martin and Kaufmann, Benjamin and Neumann, Andr{\'e} and Schaub, Torsten},
  booktitle={International Conference on Logic Programming and Nonmonotonic Reasoning},
  pages={260--265},
  year={2007},
  organization={Springer}
}

@article{DBLP:journals/corr/GebserKKS14,
  title = {Clingo = {ASP} + Control: Preliminary Report},
  author = {Gebser, Martin and Kaminski, Roland and Kaufmann, Benjamin and Schaub, Torsten},
  journal = {CoRR},
  volume = {abs/1405.3694},
  year = {2014}
}

@online{copay,
    title = {{Copay}},
    author = {{BITPAY INC}},
    year = 2015,
    url = {https://github.com/bitpay/copay/},
    urldate = {2021-09-09},
    note = {Accessed: 2021-09-09},
    howpublished = {\url{https://github.com/bitpay/copay/}},
}

@inproceedings{mir:ccs:2021,
 author = {Vasilakis, Nikos and Staicu, Cristian-Alexandru and Ntousakis, Grigoris and Kallas, Konstantinos and Karel, Ben and DeHon, Andr\'{e} and Pradel, Michael},
 title = {Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege Reduction},
 year = {2021},
 isbn = {9781450384544},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 url = {https://doi.org/10.1145/3460120.3484535},
 doi = {10.1145/3460120.3484535},
 booktitle = {2021 ACM SIGSAC Conference on Computer and Communications Security},
 pages = {1821–1838},
 numpages = {18},
 keywords = {third-party libraries, supply-chain attacks, program analysis},
 location = {Virtual Event, Republic of Korea},
 series = {CCS '21}
}


@inproceedings{rebau2001dependable,
  author={Rebaudengo, M. and Reorda, M.S. and Violante, M. and Torchiano, M.},
  booktitle={Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation}, 
  title={A source-to-source compiler for generating dependable software}, 
  year={2001},
  volume={},
  number={},
  pages={33-42},
  keywords={Application software;Costs;Fault tolerance;Computer applications;Hardware;Error correction;Software performance;Redundancy;Performance evaluation;Fault detection},
  doi={10.1109/SCAM.2001.972664}}

@inproceedings{burson1990program,
  title={A program transformation approach to automating software re-engineering},
  author={Burson, Scott and Kotik, Gordon B and Markosian, Lawrence Z},
  booktitle={Proceedings Fourteenth Annual International Computer Software and Applications Conference},
  pages={314--315},
  year={1990},
  organization={IEEE Computer Society}
}

@article{kopetzki2021towards,
  title={Towards language-to-language transformation},
  author={Kopetzki, Dawid and Lybecait, Michael and Naujokat, Stefan and Steffen, Bernhard},
  journal={International Journal on Software Tools for Technology Transfer},
  volume={23},
  number={5},
  pages={655--677},
  year={2021},
  publisher={Springer}
}

@article{ledley1962automatic,
  title={Automatic-programming-language translation through syntactical analysis},
  author={Ledley, Robert S and Wilson, James B},
  journal={Communications of the ACM},
  volume={5},
  number={3},
  pages={145--155},
  year={1962},
  publisher={ACM New York, NY, USA}
}

@incollection{ben-nun2018neural,
  author       = {Ben‑Nun, Tal and Jakobovits, Alice Shoshana and Hoefler, Torsten},
  title        = {Neural Code Comprehension: A Learnable Representation of Code Semantics},
  booktitle    = {Advances in Neural Information Processing Systems},
  volume       = {31},
  pages        = {3588--3600},
  year         = {2018},
  publisher    = {Curran Associates, Inc.},
  address      = {Montreal, Canada},
  url          = {http://papers.nips.cc/paper/7617-neural-code-comprehension-a-learnable-representation-of-code-semantics.pdf}
}

@article{alon2019code2vec,
  author    = {Alon, Uri and Zilberstein, Meital and Levy, Omer and Yahav, Eran},
  title     = {Code2Vec: Learning Distributed Representations of Code},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {3},
  number    = {POPL},
  pages     = {40:1--40:29},
  year      = {2019},
  doi       = {10.1145/3290353}
}

@article{ellis2020dreamcoder,
  author    = {Ellis, Kevin and Wong, Catherine and Nye, Maxwell and Sablé‑Meyer, Mathias and Cary, Luc and Morales, Lucas and Hewitt, Luke and Solar‑Lezama, Armando and Tenenbaum, Joshua B.},
  title     = {DreamCoder: Growing Generalizable, Interpretable Knowledge with Wake–Sleep Bayesian Program Learning},
  journal   = {CoRR},
  volume    = {abs/2006.08381},
  year      = {2020},
  url       = {https://arxiv.org/abs/2006.08381}
}

@inproceedings{nye2021platypus,
  author    = {Nye, Maxwell and Others},
  title     = {PLATYPUS: Learning Program Embeddings for Program Repair and Synthesis},
  booktitle = {Proceedings of [Insert exact conference]},
  year      = {2021},
  note      = {Proceedings TBD; please update}
}
